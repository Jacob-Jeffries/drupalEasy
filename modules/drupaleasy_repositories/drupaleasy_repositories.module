<?php

/**
 * @file
 * Hook file; hook into the help text and change it.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupaleasy_repositories_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (!empty($form['field_repository_url']['widget'])) {
    foreach (Element::children($form['field_repository_url']['widget']) as $el_index) {
      $form['field_repository_url']['widget'][$el_index]['#process'][] = '_drupaleasy_repositories_url_help_text';
    }
  }
  // This validator is called using single quotes,
  // because it is being added to the array.
  $form['#validate'][] = '_drupaleasy_repositories_user_form_validate';

  // The Submit handler does not run if the above validation does not pass.
  // Our submit handler is going to happen after the regular submit handler.
  // We could find this in Xdebug by looking at the $form array.
  // The #submit array order could be changed if you want -> [1] = _method.
  $form['actions']['submit']['#submit'][] = '_drupaleasy_repositories_user_form_submit';
}

/**
 * Custom function to populate Repository URL descriptions.
 *
 * @param array $element
 *   A render element.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $form
 *   The form array.
 *
 * @return array
 *   A render element.
 */
function _drupaleasy_repositories_url_help_text(array &$element, FormStateInterface &$form_state, array &$form): array {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = \Drupal::service('drupaleasy_repositories.service');
  $help_text = $repository_service->getValidatorHelpText();
  if ($help_text) {
    $element['uri']['#description'] = t('Valid URLs include: %help_text', ['%help_text' => $help_text]);
  }
  else {
    $element['uri']['#description'] = t('No repository plugins are enabled. Contact site administrator.');
  }
  $element['uri']['#description_display'] = 'before';
  return $element;
}

/**
 * Custom validation handler for user profile form.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _drupaleasy_repositories_user_form_validate(array $form, FormStateInterface &$form_state): void {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = \Drupal::service('drupaleasy_repositories.service');
  // For some reason, $form_state->getValue('uid') isn't a thing.
  $username = $form_state->getValue('name');
  $user = user_load_by_name($username);
  // If the user doesn't exist, then use the anonymous user ID (0).
  $uid = is_object($user) ? $user->id() : 0;
  // The user id comes back as a string "1", we are turning it into an integer.
  $uid = intval($uid);
  $error = $repository_service->validateRepositoryUrls($form_state->getValue('field_repository_url'), $uid);

  if ($error) {
    $form_state->setErrorByName(
      'field_repository_url',
      $error,
    );
  }
}

/**
 * Custom submit handler for user profile form.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return void
 *   This returns nothing.
 */
function _drupaleasy_repositories_user_form_submit(array $form, FormStateInterface &$form_state): void {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  // We are in a hook so we can just spin up the service container.
  $repository_service = \Drupal::service('drupaleasy_repositories.service');

  // We are pulling the account information from the $form_state-getValue().
  // By passing User::load an id, it will give us account information.
  $account = User::load($form_state->getValue('uid'));

  // Since our submit handler runs last, the URLs have already been saved.
  // That means we only need to give the user account for the method.
  // Since load could return null, we will protect the next method.
  if (!is_null($account)) {
    $repository_service->updateRepositories($account);
  }

}

/**
 * Implements hook_user_login().
 */
function drupaleasy_repositories_user_login(UserInterface $account): void {

  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = \Drupal::service('drupaleasy_repositories.service');

  /** @var Drupal\Core\Messenger\Messenger */
  $messenger_service = \Drupal::service('messenger');

  if (!is_null($account)) {
    if ($repository_service->updateRepositories($account)) {
      $messenger_service->addMessage('All repositories updated.');
    }
  }

}

/**
 * Implements hook_cron().
 */
function drupaleasy_repositories_cron(): void {
  // Update repository nodes once per day, only between 1am and 2am GMT.
  // Assume cron runs every hour.
  // Gets the current GMT hour.
  $hour = (int) (time() / 3600) % 24;

  // Sometime in the 1am Hour UTC.
  if ($hour == 1) {
    /** @var \Drupal\user\UserStorageInterface $user_storage */
    // $user_storage = \Drupal::service('entity_type.manager')->getStorage('user');
    // $query = $user_storage->getQuery();
    $query = \Drupal::entityQuery('user');

    // Somehow the below line means active users??
    $query->condition('status', '1');
    $users = $query->accessCheck(FALSE)->execute();

    // Create a Queue API item for each user.
    // The service returns a queue worker.
    $queue = \Drupal::queue('drupaleasy_repositories_repository_node_updater');
    foreach ($users as $uid => $user) {
      $queue->createItem(['uid' => $uid]);
    }
  }

}
